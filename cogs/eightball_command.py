import discord
from discord.ext import commands
from discord import app_commands
import random
import hashlib
import logging
from typing import Optional

class EightBallCommand(commands.Cog):
    """Advanced Magic 8-Ball command with AI-like responses and sophisticated answer variations."""
    
    def __init__(self, bot):
        self.bot = bot
        
        # Massive collection of AI-like responses organized by categories
        # These responses are designed to appear as if generated by advanced AI
        self.responses = {
            "positive_confident": [
                "Absolutely! The patterns I'm analyzing suggest this outcome has exceptional probability.",
                "Yes, and I'd recommend moving forward with confidence on this matter.",
                "Definitely. My assessment indicates this aligns perfectly with optimal outcomes.",
                "Without a doubt. The contextual indicators strongly support this direction.",
                "Certainly! This appears to be an excellent path based on current variables.",
                "Yes, this demonstrates high compatibility with favorable circumstances.",
                "Affirmatively. The probability matrices are showing very promising results.",
                "Indeed, this choice resonates with positive trajectory patterns.",
                "Absolutely, and I'd suggest capitalizing on this opportunity promptly.",
                "Yes, the algorithmic analysis reveals strong success indicators here.",
                "Definitively positive. This aligns with optimal decision frameworks.",
                "Certainly! The data suggests this will yield beneficial outcomes.",
                "Yes, and the timing appears to be particularly advantageous right now.",
                "Absolutely. This demonstrates excellent synergy with your goals.",
                "Confirmed. The predictive models are showing highly favorable results."
            ],
            
            "positive_moderate": [
                "Yes, though I'd recommend proceeding with thoughtful consideration.",
                "It appears favorable, based on the information patterns I'm processing.",
                "Most likely yes, with some minor variables to keep in mind.",
                "The indicators suggest a positive outcome, with reasonable confidence.",
                "Yes, though you might want to consider timing and approach carefully.",
                "This seems promising, and I'd lean toward a positive assessment.",
                "Likely yes, based on the contextual analysis I'm conducting.",
                "The probability leans positive, with good supporting evidence.",
                "Yes, and it might be worth exploring this further for optimal results.",
                "This appears favorable, though maintaining flexibility would be wise.",
                "The analysis suggests yes, with some beneficial adjustments possible.",
                "Positive indicators are present, and the outlook seems encouraging.",
                "Yes, and this could develop into something quite beneficial.",
                "The patterns suggest a favorable outcome with proper execution.",
                "Likely positive, based on the current trajectory I'm observing."
            ],
            
            "neutral_analytical": [
                "The variables are currently balanced - success depends on your approach.",
                "This requires careful consideration of multiple interconnected factors.",
                "The outcome appears highly dependent on timing and execution quality.",
                "I'm detecting mixed signals that require deeper contextual analysis.",
                "This sits at an interesting intersection of possibilities and challenges.",
                "The data suggests this could go either way depending on key decisions.",
                "Multiple pathways are available - your choice will determine the outcome.",
                "This appears to be a situation where preparation will be crucial.",
                "The indicators are evenly distributed across potential outcomes.",
                "This requires balancing several competing factors for optimal results.",
                "The analysis reveals this is highly dependent on external circumstances.",
                "I'm observing a complex interplay of variables that could shift either way.",
                "This appears to be a pivotal moment where small actions matter greatly.",
                "The outcome matrix shows equal probability across multiple scenarios.",
                "This requires strategic thinking and careful timing for best results."
            ],
            
            "negative_diplomatic": [
                "I'd recommend reconsidering this approach based on current indicators.",
                "The analysis suggests exploring alternative pathways might be wiser.",
                "This appears to have some challenging aspects that merit careful thought.",
                "Based on the patterns I'm observing, this might not be the optimal timing.",
                "I'm detecting some potential complications that deserve attention.",
                "The indicators suggest this could present unexpected difficulties.",
                "This appears to require significant additional preparation before proceeding.",
                "My assessment indicates this might not align with your best interests.",
                "The analysis reveals some concerning variables in this scenario.",
                "I'd suggest gathering more information before committing to this path.",
                "This appears to have some inherent challenges that could prove problematic.",
                "The probability analysis suggests exploring other options first.",
                "Based on current indicators, this timing might not be optimal.",
                "I'm observing some resistance patterns that could create obstacles.",
                "This appears to require addressing some fundamental issues first."
            ],
            
            "mysterious_cryptic": [
                "The ancient patterns whisper of hidden truths yet to be revealed.",
                "Look beyond the obvious - the answer lies in what remains unspoken.",
                "The cosmic algorithms suggest patience will unveil greater clarity.",
                "Time will reveal what current perception cannot fully comprehend.",
                "The answer dances between dimensions of possibility and certainty.",
                "What you seek is already known to you, though not yet recognized.",
                "The universe operates on schedules beyond immediate understanding.",
                "This question touches realms where logic and intuition converge.",
                "The path forward will become illuminated when the moment is right.",
                "Some answers require lived experience rather than mere prediction.",
                "The threads of fate are weaving a pattern unique to your journey.",
                "Consider that the question itself may be evolving as you ask it.",
                "The response you need most may not be the one you're seeking.",
                "Reality often surprises us by exceeding our wildest expectations.",
                "The answer exists in the space between what is and what could be."
            ],
            
            "philosophical_deep": [
                "This question invites us to examine the nature of certainty itself.",
                "Perhaps the value lies not in the answer, but in the asking.",
                "Consider how your perspective on this might evolve over time.",
                "The most profound answers often emerge from embracing uncertainty.",
                "This touches on fundamental questions about choice and consequence.",
                "Sometimes the greatest wisdom is found in admitting what we don't know.",
                "Your question reveals as much about you as any answer could.",
                "This invites contemplation of what we truly control versus what we don't.",
                "The answer may depend entirely on how you choose to define success.",
                "Consider that multiple contradictory answers could all be equally true.",
                "This question exists at the intersection of hope and reality.",
                "Perhaps the answer changes based on who is asking and when.",
                "The most meaningful responses often defy simple categorization.",
                "This reminds us that some questions are more valuable than their answers.",
                "Consider that the act of questioning is itself a form of answer."
            ],
            
            "practical_advisory": [
                "Based on practical considerations, I'd recommend thorough planning first.",
                "This appears to require breaking down into smaller, manageable steps.",
                "The key seems to be focusing on what you can directly influence.",
                "I'd suggest starting with low-risk experiments to gather data.",
                "This might benefit from consulting with others who have relevant experience.",
                "Consider creating contingency plans for multiple possible outcomes.",
                "The practical approach would be to establish clear success metrics first.",
                "This appears to require balancing immediate needs with long-term goals.",
                "I'd recommend documenting your decision-making process for future reference.",
                "The most effective path likely involves systematic trial and adjustment.",
                "This might benefit from a pilot approach before full implementation.",
                "Consider what resources you'll need and whether they're currently available.",
                "The practical answer depends on your specific constraints and priorities.",
                "I'd suggest timeline planning and regular progress checkpoints.",
                "This appears to require aligning expectations with realistic capabilities."
            ],
            
            "humorous_witty": [
                "My advanced algorithms suggest: probably, but don't quote me on that.",
                "The AI consensus is... wait, let me ask my eight other personalities.",
                "Based on my extensive training data: Magic 8-Ball says maybe?",
                "My neural networks are laughing at this question, but in a nice way.",
                "The probability is high, assuming we're not living in a simulation.",
                "My response generator is having an existential crisis about this one.",
                "Based on my analysis of approximately zero relevant data points: sure!",
                "My artificial intuition is tingling, and it's saying... ask again later.",
                "The answer is 42. Wait, that's a different question entirely.",
                "My machine learning model trained on fortune cookies says yes.",
                "Based on quantum uncertainty principles: it's both yes and no simultaneously.",
                "My predictive algorithms are arguing amongst themselves about this.",
                "The answer requires more coffee... wait, I don't drink coffee. Nevermind.",
                "My response matrix is buffering... please hold while I consult the void.",
                "Based on my extensive analysis of random number generators: absolutely maybe."
            ]
        }
        
        # Special themed responses for specific types of questions
        self.special_responses = {
            "love": [
                "Matters of the heart operate by their own mysterious algorithms.",
                "Love's complexity defies even the most sophisticated prediction models.",
                "The chemistry of attraction follows patterns beyond current analysis.",
                "Emotional connections create their own unique probability matrices.",
                "The heart's logic operates on frequencies I'm still learning to interpret."
            ],
            "money": [
                "Financial outcomes depend heavily on strategic decision-making patterns.",
                "Economic variables are notoriously difficult to predict with certainty.",
                "Wealth creation follows principles that blend planning with opportunity.",
                "Financial success often requires patience and systematic approaches.",
                "Market forces operate on scales both vast and infinitesimally small."
            ],
            "future": [
                "The future exists as a superposition of all possible present decisions.",
                "Temporal prediction requires accounting for exponentially increasing variables.",
                "Tomorrow's reality emerges from today's choices and circumstances.",
                "The future is simultaneously inevitable and completely malleable.",
                "Predictive accuracy decreases exponentially with temporal distance."
            ]
        }
        
        # Emojis for different response categories
        self.response_emojis = {
            "positive_confident": ["✨", "🌟", "💫", "⭐", "🎯", "🚀", "💎", "🏆"],
            "positive_moderate": ["😊", "👍", "🙂", "😌", "💙", "🌈", "🍀", "☀️"],
            "neutral_analytical": ["🤔", "⚖️", "🧠", "📊", "🔍", "⚗️", "🎲", "🌀"],
            "negative_diplomatic": ["🤷", "💭", "⏳", "🔄", "📝", "🛡️", "⚠️", "🌫️"],
            "mysterious_cryptic": ["🔮", "🌙", "✨", "🌌", "🗝️", "👁️", "🌀", "🔯"],
            "philosophical_deep": ["🧘", "📚", "🌸", "🍃", "🌅", "🌊", "🦋", "💫"],
            "practical_advisory": ["📋", "⚙️", "🛠️", "📈", "🎯", "🔧", "📊", "💡"],
            "humorous_witty": ["😄", "🎭", "🤖", "🎪", "🎨", "🎵", "🎲", "🃏"]
        }
    
    def get_category_weights(self, question: str) -> dict:
        """Determine response category weights based on question content."""
        question_lower = question.lower()
        
        # Base weights for balanced responses
        weights = {
            "positive_confident": 0.15,
            "positive_moderate": 0.20,
            "neutral_analytical": 0.25,
            "negative_diplomatic": 0.15,
            "mysterious_cryptic": 0.10,
            "philosophical_deep": 0.05,
            "practical_advisory": 0.05,
            "humorous_witty": 0.05
        }
        
        # Adjust weights based on question keywords
        if any(word in question_lower for word in ["should", "recommend", "advice", "suggest"]):
            weights["practical_advisory"] += 0.10
            weights["positive_moderate"] += 0.05
        
        if any(word in question_lower for word in ["will", "future", "happen", "going to"]):
            weights["mysterious_cryptic"] += 0.08
            weights["neutral_analytical"] += 0.07
        
        if any(word in question_lower for word in ["love", "relationship", "heart", "feel"]):
            weights["philosophical_deep"] += 0.10
            weights["mysterious_cryptic"] += 0.05
        
        if any(word in question_lower for word in ["money", "rich", "wealthy", "financial", "job", "career"]):
            weights["practical_advisory"] += 0.10
            weights["neutral_analytical"] += 0.05
        
        if "?" not in question and any(word in question_lower for word in ["funny", "joke", "lol", "haha"]):
            weights["humorous_witty"] += 0.15
        
        # Normalize weights to sum to 1
        total_weight = sum(weights.values())
        return {k: v/total_weight for k, v in weights.items()}
    
    def select_response_category(self, question: str, user_id: int) -> str:
        """Select response category using weighted random selection with user consistency."""
        # Create deterministic but varied selection based on user and question
        hash_input = f"{user_id}_{question.lower()}"
        hash_value = int(hashlib.md5(hash_input.encode()).hexdigest()[:8], 16)
        
        weights = self.get_category_weights(question)
        
        # Convert to cumulative weights
        categories = list(weights.keys())
        cumulative_weights = []
        running_total = 0
        for category in categories:
            running_total += weights[category]
            cumulative_weights.append(running_total)
        
        # Select category based on hash
        random_value = (hash_value % 100000) / 100000  # Convert to 0-1 range
        
        for i, weight in enumerate(cumulative_weights):
            if random_value <= weight:
                return categories[i]
        
        return categories[-1]  # Fallback
    
    def get_special_response(self, question: str) -> Optional[str]:
        """Check for special themed responses based on question content."""
        question_lower = question.lower()
        
        if any(word in question_lower for word in ["love", "crush", "relationship", "dating", "marry"]):
            return random.choice(self.special_responses["love"])
        
        if any(word in question_lower for word in ["money", "rich", "wealthy", "financial", "lottery", "job", "career", "salary"]):
            return random.choice(self.special_responses["money"])
        
        if any(word in question_lower for word in ["future", "tomorrow", "next year", "will i", "gonna", "going to"]):
            return random.choice(self.special_responses["future"])
        
        return None
    
    @app_commands.command(name="8ball", description="🔮 Ask the advanced AI magic 8-ball any question")
    @app_commands.describe(
        question="Your question for the mystical AI oracle"
    )
    async def eightball(self, interaction: discord.Interaction, question: str):
        """Advanced Magic 8-Ball with AI-like responses and sophisticated analysis."""
        try:
            # Input validation
            if not question or not question.strip():
                embed = discord.Embed(
                    title="🔮 No Question Detected",
                    description="Please ask me a question for the mystical AI oracle to answer!",
                    color=discord.Color.purple(),
                    timestamp=discord.utils.utcnow()
                )
                embed.add_field(
                    name="💡 Example Questions:",
                    value="• Will I be successful in my project?\n• Should I take this opportunity?\n• Is this a good decision?\n• What does the future hold?",
                    inline=False
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Length validation
            if len(question) > 500:
                embed = discord.Embed(
                    title="🔮 Question Too Complex",
                    description="Please ask a shorter question (500 characters or less) for optimal mystical analysis.",
                    color=discord.Color.orange(),
                    timestamp=discord.utils.utcnow()
                )
                embed.add_field(
                    name="📏 Current Length:",
                    value=f"{len(question)} characters",
                    inline=False
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Check for special themed response first
            special_response = self.get_special_response(question)
            if special_response:
                response_text = special_response
                category = "mysterious_cryptic"  # Use mystical styling for special responses
            else:
                # Select response category and get response
                category = self.select_response_category(question, interaction.user.id)
                response_text = random.choice(self.responses[category])
            
            # Select appropriate emoji
            emoji = random.choice(self.response_emojis[category])
            
            # Create response embed with sophisticated styling
            embed = discord.Embed(
                title=f"🔮 AI Oracle Response {emoji}",
                color=self.get_category_color(category),
                timestamp=discord.utils.utcnow()
            )
            
            # Add the question
            question_preview = question[:100] + "..." if len(question) > 100 else question
            embed.add_field(
                name="❓ Your Question:",
                value=f"*\"{question_preview}\"*",
                inline=False
            )
            
            # Add the AI response
            embed.add_field(
                name=f"{emoji} AI Analysis:",
                value=response_text,
                inline=False
            )
            
            # Add category-specific footer
            footer_texts = {
                "positive_confident": "High Confidence Analysis",
                "positive_moderate": "Favorable Assessment",
                "neutral_analytical": "Balanced Analysis",
                "negative_diplomatic": "Cautionary Guidance",
                "mysterious_cryptic": "Mystical Interpretation",
                "philosophical_deep": "Philosophical Insight",
                "practical_advisory": "Practical Guidance",
                "humorous_witty": "Witty AI Response"
            }
            
            embed.set_footer(
                text=f"🧠 {footer_texts[category]} • Asked by {interaction.user.display_name}",
                icon_url=interaction.user.display_avatar.url
            )
            
            # Add mystical decorative element
            confidence_level = random.randint(78, 97)  # Random high confidence for AI feel
            embed.add_field(
                name="📊 AI Confidence Level:",
                value=f"**{confidence_level}%** ({'█' * (confidence_level // 10)}{'░' * (10 - confidence_level // 10)})",
                inline=True
            )
            
            # Add reading number for mystical feel
            reading_number = random.randint(10000, 99999)
            embed.add_field(
                name="🔢 Reading ID:",
                value=f"#{reading_number}",
                inline=True
            )
            
            await interaction.response.send_message(embed=embed)
            
            # Log the question for analytics (without storing personal data)
            logging.info(f"8ball question asked by {interaction.user.id} - Category: {category}")
            
        except Exception as e:
            embed = discord.Embed(
                title="🔮 Oracle Error",
                description="The mystical AI oracle encountered a disturbance in the cosmic algorithms.",
                color=discord.Color.red(),
                timestamp=discord.utils.utcnow()
            )
            embed.add_field(
                name="💫 Try Again:",
                value="The oracle's connection to the mystical realm was temporarily interrupted.",
                inline=False
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            logging.error(f"Error in 8ball command: {e}", exc_info=True)
    
    def get_category_color(self, category: str) -> discord.Color:
        """Get appropriate embed color for each response category."""
        colors = {
            "positive_confident": discord.Color.green(),
            "positive_moderate": discord.Color.blue(),
            "neutral_analytical": discord.Color.purple(),
            "negative_diplomatic": discord.Color.orange(),
            "mysterious_cryptic": discord.Color.dark_purple(),
            "philosophical_deep": discord.Color.teal(),
            "practical_advisory": discord.Color.dark_blue(),
            "humorous_witty": discord.Color.gold()
        }
        return colors.get(category, discord.Color.purple())

# Setup functions
async def setup(bot):
    """Setup function to add the EightBallCommand cog to the bot."""
    await bot.add_cog(EightBallCommand(bot))
    logging.info("8Ball command loaded successfully")

def add_eightball_command(bot):
    """Alternative setup function for manual integration."""
    eightball_cog = EightBallCommand(bot)
    
    @bot.tree.command(name="8ball", description="🔮 Ask the advanced AI magic 8-ball any question")
    @app_commands.describe(question="Your question for the mystical AI oracle")
    async def eightball(interaction: discord.Interaction, question: str):
        await eightball_cog.eightball(interaction, question)
    
    logging.info("8Ball command added successfully")